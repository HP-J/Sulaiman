.card
{
  display: flex;
  flex-flow: wrap;

  outline: none;
  overflow: hidden;

  background-color: var(--color-background);
  color: var(--color-text-focus);

  position: relative;
  width: calc(100vw - 30px);

  font-family: Oxygen, sans-serif;
  font-weight: 400;

  padding: 8px 15px;
}

.card:hover
{
  background-color: var(--color-hovered);
}

/* cards inside of a parent card */

.card > .card
{
  flex-grow: 1;

  background-color: transparent;
  
  width: auto;
  padding: 2px 0px;
}

.cardLineBreak
{
  flex-basis: 100%;
  width: 0px;
  height: 0px;
}

.cardTitle, .cardDescription
{
  overflow: hidden;
  
  display: flex;
  flex-grow: 1;
  flex-basis: auto;
  align-items: center;
  justify-content: flex-start;
  
  background-color: transparent;
  
  font-size: calc(11px + 0.5vw + 1vh);
  font-weight: 400;

  user-select: none;
  white-space: pre-line;

  width: auto;
  height: auto;

  padding: 1px 0px;
}

.cardDescription
{
  color: var(--color-text);
  width: 100%;
}

.cardIcon
{
  align-self: center;

  background-color: transparent;
  background-size: 100% auto;
  background-repeat: no-repeat;
  background-position: center;

  width: calc(22px + 1vw + 0.5vh);
  height: auto;
}

.card:not(.cardFastForward) > .cardIcon
{
  transition: transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

.cardRight
{
  justify-content: flex-end;
}

.cardCenter
{
  justify-content: center;
}

.cardSmall
{
  font-size: calc(8px + 0.5vw + 1vh);
}

.cardSmaller
{
  font-size: calc(8px + 0.5vw + 0.8vh);
}

.cardBig
{
  font-size: calc(12px + 0.5vw + 1.5vh);
}

.cardBigger
{
  font-size: calc(16px + 0.5vw + 1.5vh);
}

.cardLight
{
  font-weight: 100;
}

.cardBold
{
  font-weight: 700;
}

.cardSelectable
{
  user-select: text;
}

/* spacing between the title and icons horizontally */

.cardTitle + .cardIcon,
.cardIcon + .cardIcon
{
  margin-left: 5px;
}

/* spacing between elements vertically
excluding line breaks and the last element of a card */

.card > *:not(.cardLineBreak)
{
  margin-top: 3px;
  margin-bottom: 3px;
}

/* collapse and expand
*/

.card:not(.cardFastForward) > .cardExpandChild
{
  transition-property: opacity;
  transition-duration: var(--cardChildAnimationDuration);
  transition-timing-function: ease;
}

.card:not(.cardFastForward) > .cardCollapseChild
{
  opacity: 0;

  padding: 0 !important;
  margin: 0 !important;

  transition-property: opacity, padding, margin !important;
}

.cardCollapsedChild
{
  min-height: 0  !important;
  max-height: 0  !important;
}

.card.cardFastForward > .cardCollapseChild
{
  min-height: 0  !important;
  max-height: 0  !important;

  padding: 0 !important;
  margin: 0 !important;
}
